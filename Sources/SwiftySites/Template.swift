extension Site {

    /// A template for site content.
    public struct Template {
    
        /// By default the template matches all content of one specific type.
        public static var defaultMatch: String {
            #"^.*$"#
        }

        /// By default the template produces a file named `index` with the corresponding extension.
        public static var defaultIndex: String {
            "index"
        }

        /// By default the template produces a file with the `html` extension.
        public static var defaultSuffix: String {
            "html"
        }

        let match: String
        let exclude: String?
        let index: String?
        let suffix: String?
        let applyA: ((Site, A) -> String)?
        let applyB: ((Site, B) -> String)?
        let applyC: ((Site, C) -> String)?
        let applyD: ((Site, D) -> String)?
        let applyE: ((Site, E) -> String)?
    }

    /// Defines a template for the first content type.
    ///
    /// - Parameters:
    ///   - match: A regular expresion to indicate which content paths it will apply to.
    ///   - exclude: A regular expresion used to exclude paths from this template.
    ///   - index: The name of the file being generated at the content's path by this template. If `.none` is specified, the content's path will render as a file instead of directory.
    ///   - suffix: The extension to be appended to the files generated by this template.
    ///   - apply: The function producing the output's content from a ``Site`` instance and a content item of the corresponding content type.
    ///
    public static func templateA(_ match: String = Template.defaultMatch, exclude: String? = .none, index: String? = Template.defaultIndex, suffix: String? = Template.defaultSuffix, apply: @escaping (Site, A) -> String) -> Template {
        Template(match: match, exclude: exclude, index: index, suffix: suffix, applyA: apply, applyB: .none, applyC: .none, applyD: .none, applyE: .none)
    }

    /// Defines a template for the second content type.
    ///
    /// See ``templateA(_:exclude:index:suffix:apply:)`` for a description of each parameter.
    ///
    public static func templateB(_ match: String = Template.defaultMatch, exclude: String? = .none, index: String? = Template.defaultIndex, suffix: String = Template.defaultSuffix, apply: @escaping (Site, B) -> String) -> Template {
        Template(match: match, exclude: exclude, index: index, suffix: suffix, applyA: .none, applyB: apply, applyC: .none, applyD: .none, applyE: .none)
    }

    /// Defines a template for the third content type.
    ///
    /// See ``templateA(_:exclude:index:suffix:apply:)`` for a description of each parameter.
    ///
    public static func templateC(_ match: String = Template.defaultMatch, exclude: String? = .none, index: String? = Template.defaultIndex, suffix: String = Template.defaultSuffix, apply: @escaping (Site, C) -> String) -> Template {
        Template(match: match, exclude: exclude, index: index, suffix: suffix, applyA: .none, applyB: .none, applyC: apply, applyD: .none, applyE: .none)
    }

    /// Defines a template for the fourth content type.
    ///
    /// See ``templateA(_:exclude:index:suffix:apply:)`` for a description of each parameter.
    ///
    public static func templateD(_ match: String = Template.defaultMatch, exclude: String? = .none, index: String? = Template.defaultIndex, suffix: String = Template.defaultSuffix, apply: @escaping (Site, D) -> String) -> Template {
        Template(match: match, exclude: exclude, index: index, suffix: suffix, applyA: .none, applyB: .none, applyC: .none, applyD: apply, applyE: .none)
    }

    /// Defines a template for the fifth content type.
    ///
    /// See ``templateA(_:exclude:index:suffix:apply:)`` for a description of each parameter.
    ///
    public static func templateE(_ match: String = Template.defaultMatch, exclude: String? = .none, index: String? = Template.defaultIndex, suffix: String = Template.defaultSuffix, apply: @escaping (Site, E) -> String) -> Template {
        Template(match: match, exclude: exclude, index: index, suffix: suffix, applyA: .none, applyB: .none, applyC: .none, applyD: .none, applyE: apply)
    }
}
